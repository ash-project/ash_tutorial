# API

```elixir
Mix.install([:ash])
```

## Create an API

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="actions.livemd">Actions</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="data_persistence.livemd">Data Persistence</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

### In this tutorial you'll create a Registry and an API

* A **Registry** is a collecion of Resources. It's used to improve compile times and reduce compile-time dependencies.
* An **API** is a way for you to interact with your resources.

#### Registry

Add an entries block to `Tutorial.Registry`.

<!-- livebook:{"force_markdown":true} -->

```elixir
entries do

end
```

Then add the entry `entry Tutorial.Profile` inside the block.

#### API

Add a resources block to the `Tutorial` module.

<!-- livebook:{"force_markdown":true} -->

```elixir
resources do

end
```

Then add the registry you just created: `registry Tutorial.Registry`

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  defmodule Tutorial.Profile do
    use Ash.Resource

    actions do
      defaults [:create]
    end

    attributes do
      uuid_primary_key :id
      attribute :name, :string
    end
  end

  defmodule Tutorial.Registry do
    use Ash.Registry

    entries do
      entry Tutorial.Profile
    end
  end

  defmodule Tutorial do
    use Ash.Api

    resources do
      registry Tutorial.Registry
    end
  end
  ```

  </div>
</details>

### Enter your solution

```elixir
defmodule Tutorial.Profile do
  use Ash.Resource

  actions do
    defaults([:create])
  end

  attributes do
    uuid_primary_key(:id)
    attribute(:name, :string)
  end
end

defmodule Tutorial.Registry do
  use Ash.Registry

  # <--- Create your entries here
end

defmodule Tutorial do
  use Ash.Api

  # <--- Create your resources here
end
```

### Creating a Profile record

<!-- livebook:{"break_markdown":true} -->

If everything is configured correctly, you can now call `create!/1` to create a Profile.

```elixir
Tutorial.Profile
|> Ash.Changeset.for_create(:create, %{name: "My Name"})
|> Tutorial.create!()
```

Note that this Profile is not being persisted yet to any database. For that we need to set up a data layer.

<!-- livebook:{"break_markdown":true} -->

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="actions.livemd">Actions</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="data_persistence.livemd">Data Persistence</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
