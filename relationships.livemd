# Relationships

```elixir
Mix.install([:ash])
```

## Relationships

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="customizing_actions.livemd">Customizing Actions</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="managing_relationships.livemd">Managing Relationships</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

### In this tutorial you will create a relationship between a Ticket and Representative resource

Create a `relationships do .. end` block in the Ticket resource.

Inside the `relationships` block, define a `belongs_to` representative like so:

`belongs_to :representative, Tutorial.Support.Representative`

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  defmodule Tutorial.Support.Ticket do

  # ...

    relationships do
      # belongs_to means that the destination attribute is unique, meaning only one related record could exist.
      # We assume that the destination attribute is `representative_id` based
      # on the name of this relationship and that the source attribute is `representative_id`.
      # We create `representative_id` automatically.
      belongs_to :representative, Tutorial.Support.Representative
    end
  
  # ...
  ```

  </div>
</details>

### Enter your solution

```elixir
defmodule Tutorial.Support.Ticket do
  use Ash.Resource,
    data_layer: Ash.DataLayer.Ets

  actions do
    defaults([:create, :read])
  end

  attributes do
    uuid_primary_key(:id)
    attribute(:subject, :string, allow_nil?: false)
    attribute(:description, :string)

    attribute :status, :atom do
      constraints(one_of: [:open, :closed])
      default(:open)
      allow_nil?(false)
    end

    create_timestamp(:created_at)
    update_timestamp(:updated_at)
  end

  # <-- Add the relationship here
end

defmodule Tutorial.Support.Representative do
  use Ash.Resource,
    data_layer: Ash.DataLayer.Ets

  actions do
    defaults([:create, :read])
  end

  attributes do
    uuid_primary_key(:id)
    attribute(:name, :string)
  end
end
```

```elixir
defmodule Tutorial.Support.Registry do
  use Ash.Registry

  entries do
    entry(Tutorial.Support.Ticket)
    entry(Tutorial.Support.Representative)
  end
end

defmodule Tutorial.Support do
  use Ash.Api

  resources do
    registry(Tutorial.Support.Registry)
  end
end
```

## Creating a Ticket record with a representative Relationship

Just defining a relationship is not enough to start managing the relationship. This topic is complicated and you will start managing relationships properly in the next tutorial. For example, by default you can't assign a primary key directly. For that you need to define `attribute_writable? true` on the `belongs_to :representative` relationship in the previous code block.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  relationships do
    belongs_to :representative, Tutorial.Support.Representative do
      # With the following modification the attribute can be written to, during the :create action:
      attribute_writable? true
    end
  end
  ```

  </div>
</details>

```elixir
# Creates a Representative
joe =
  Tutorial.Support.Representative
  |> Ash.Changeset.for_create(:create, %{name: "Joe Armstrong"})
  |> Tutorial.Support.create!()
```

Try running the following code before and after adding the `attribute_writable?` modification.

```elixir
# Creates a Ticket with the representative
Tutorial.Support.Ticket
|> Ash.Changeset.for_create(:create, %{subject: "My spoon is too big!", representative_id: joe.id})
|> Tutorial.Support.create!()
# `load!/2` loads in the representative. Try removing this line to see what changes
|> Tutorial.Support.load!([:representative])
```

Like mentioned, this is a very basic way to manage relationships and the topic is fairly complicated. In the next tutorial you'll manage relationships the idiomatic way.

<!-- livebook:{"break_markdown":true} -->

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="customizing_actions.livemd">Customizing Actions</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="managing_relationships.livemd">Managing Relationships</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
