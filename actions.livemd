# Ash: 2 - Actions

```elixir
Application.put_env(:ash, :validate_domain_resource_inclusion?, false)
Application.put_env(:ash, :validate_domain_config_inclusion?, false)

Mix.install([{:ash, "~> 3.0.0-rc"}], consolidate_protocols: false)
```

## Create an Action

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="resources.livemd">Resources</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="domain.livemd">Domain</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

<!-- livebook:{"break_markdown":true} -->

### In this tutorial, you will create a Resource with a 'create' action

First, add the action block inside the Resource.

<!-- livebook:{"force_markdown":true} -->

```elixir
actions do

end
```

Inside this action block you can define any type of actions you can think of, including all **CRUD** actions.

For now, add a simple create action, that accepts the `:name` attribute as input.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  defmodule Tutorial.Profile do
    use Ash.Resource,
      domain: Tutorial

    actions do
      create :create do
        accept [:name]
      end
    end

    attributes do
      uuid_primary_key :id
      attribute :name, :string
    end
  end
  ```

  </div>
</details>

### Enter your solution

```elixir
defmodule Tutorial.Profile do
  use Ash.Resource,
    domain: Tutorial

  # <--- Create your action here

  attributes do
    uuid_primary_key :id
    attribute :name, :string
  end
end
```

### Add the Resource to the Domain

```elixir
defmodule Tutorial do
  use Ash.Domain

  resources do
    resource Tutorial.Profile
  end
end
```

### Changeset

<!-- livebook:{"break_markdown":true} -->

If everything is configured correctly, you can now call `for_create/3` to create a changeset.

```elixir
Tutorial.Profile
|> Ash.Changeset.for_create(:create, %{name: "My Name"})
```

To learn more about actions, read the [section on Actions in the documentation](https://hexdocs.pm/ash/actions.html)

<!-- livebook:{"break_markdown":true} -->

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="./resources.livemd">Resources</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="./overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="./domain.livemd">Domain</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
